문성훈 강사님

Javascript 와 ECMAScript 는 엄밀히 말하면 같은 것이 아님
	Javascript = ECMAScript + client side web API
	서버쪽 side일 경우에	host API

HTML5 = HTML + CSS3 + Javascript web API
	자바스크립트가 들어온 것이 아니고 API 가 들어온 것임

Meta programming : TypeScript === transpile ===> Javascript
	왜함? - Typescript는 클래스 기반의 객체지향 언어

Package Manager : 모듈간의 dependency를 맞춰주는데 도움을 주는 것
	- npm(node package manager)

Transpiler
	- TypeScript

자동화 도구 : build, test, deploy의 과정를 자동화 해주는 도구
	- gulp

모듈화 : 여러 단위 코드들을 모아서 하나로 컴포넌트화 시켜주는 것
	- webpack

Framework
	- Angular, React, Vue.js

Javascript를 실행하려면, Javascript Engine이 당연히 있어야 한다.
	=> Client side : browser 안에 내장 (각각의 브라우저마다 엔진이 다르다.)
		Chrome -> V8 engine / Edge -> chakra engine /
		Safafi -> webkit engine / Firefox -> Spider Monkey
	=> Server side
		Node.js -> V8 engine

-----------------------------------------------------------------------------------------------------------

CPU -> 연산
데이터는 메모리에서 가져옴 (메모리 주소 알아야 함)
	=> 변수(식별자)를 이용해서 해당 메모리를 사용
	** 메모리에 대한 직접적인 접근 불가(변수 사용해야 한다)

변수 -> 식별자(identifier) - 이름을 붙여놓은 것
	- 식별자는 Naming Rule이 있다.
		특수문자는 _ $ 만 사용 가능
		숫자로 시작 불가

변수 선언(Variable declaration) : 변수 생성
	- var
	* function-level scope : 함수 기준
	- let (ES6)
	* block-level scope : 블럭 기준
	- const (ES6)
	* block-level scope : 블럭 기준

* undefined : primitive value (원시값) 중 하나이다.
	JS Engine에 의해 사용됨 (개발자의 직접적인 사용은 지양)
	변수를 초기화 할 때 사용 (ex. var score;)

* 모든 식별자들은 "execution context"에 key/value 형태로 저장됨

Variable hoisting (변수 호이스팅) : 변수 선언을 Runtime 이전에 수행
	마치 변수 선언이 해당 scope의 최상단으로 끌어 올려진 것 같은 현상
	** Javascript 의 모든 식별자들은 호이스팅이 일어난다

** 호이스팅은 프로그램 실행간에 한번만 일어나는 것이 아니다.
전역적인 변수를 기준으로 호이스팅이 먼저 일어나게 되고, 각각의 함수를 수행하면서
호이스팅이 또 일어나게 된다.
	함수 내에서 var keyword를 사용한 변수의 경우 함수가 수행되면서 호이스팅이 또다시 발생하기 때문에
	위치에 따른 값의 변화를 잘 확인해야 한다.

var로 변수 선언시 주의사항
	1. 중복 선언이 가능
	2. var keyword는 function-level scope 생성

var을 이용하다가 ES6에 들어서면서 let과 const가 추가되었다.
  - 무엇이 다를까
	let
	1. 중복 선언 안됨
	2. block-level scope
	3. let을 이용하면 호이스팅이 안되는 것처럼 동작
		let 으로 변수를 선언하게 되면, 선언과 동시에 초기화가 일어나지 않는다.
	4. let keyword는 변수를 선언하면, 변수를 일시적으로 사용할 수 없는 구간이 발생한다.
		이를 Temporal Dead Zone 이라고 부른다.	
	
	const : 상수를 선언할 때 사용 (변수에 대한 재할당 금지)

변수의 값 할당
** 원시값(primitive value)은 불변(immutable)의 법칙을 가짐 == 변수를 할당할 때에는 undefined가 변하는 것이 아니고
						        변수가 가리키는 메모리 주소가 변하는 것이다.
** 이 때, 기존에 가리키고 있던 값은 garbage collection의 대상이 되어 사라지게 된다. (시점은 정확하지 않음)

Naming Rule (식별자 Naming Rule)
	- 특수문자 안됨 ($, _ 제외)
	- 숫자로 시작하면 안됨

Naming convention
	1. camel case -> firstName
	2. snake_case -> first_name
	3. pascal_case -> FirstName
	4. type Hungarian case -> strFirstName
		(맨 앞에 데이터 타입을 붙임)

** Javascript는 camel case, pascal_case의 두가지를 사용

-----------------------------------------------------------------------------------------------------------

기본적인 용어
1. literal (리터럴) : 특정 값을 표현하기 위해, 사람이 이해할 수 있는 문자나 약속된 기호를 이용하는 rotation(표기법)
	- 숫자 literal -> 3
	- 문자열 literal -> 'hello' , "hello", `hello` (single quotation, double quotation, backtick)
	- null literal -> null (변수가 참조하는 값이 없다, 개발자가 직접 사용)
	- undefined literal -> undefined (변수가 있는데 아직 초기화가 되지 않았다는 의미, JS Engine에 의해 사용됨)
	- 객체 literal -> {'name' : 'Kim'} (key : value 의 형태로 표현)
	- 배열 literal -> [1, 2, 3]
	- 함수 literal -> function() {}
	등등등

2. statement (문) : 프로그램의 최소 실행 단위
	- program은 statement의 집합
	- statement를 구성하고 있는 각각은 token 이라고 한다.
		var sum = 1 + 2; (token : var, sum, =, 1, +, 2, ;)
	- ; token : statement의 종결을 표현하는 token 이다. (당연히 찍어야 해요~^&^)
		생략할 경우, Javascript Engine이 판단하여 ASI(Automatic Semicolon Insertion) 동작
		(ASI고 나발이고 생략하덜말고 찍으라, 명확한 Code를 위해 생략하지 마세요)
	- block의 경우는 self closing 기능을 가지고 있기 때문에 세미콜론을 통해
	statement의 종결을 따로 표현하지 않는다.
	
3. expression (식) : 평가과정을 거쳐 값으로 인식되는 구문

-----------------------------------------------------------------------------------------------------------

Data Type : 총 7개 (number, string, boolean, undefined, null, symbol, Object)
데이터 값에 대한 Data type
1. number type
	- 정수와 실수를 구분하지 않는다. (내부적으로 모두 수는 64-bit 실수로 처리)
	- Infinity : 양의 무한대를 의미하는 상수값 (앞에 - 붙이면 음의 무한대))
	- NaN (Not a Number) : 숫자가 아님을 의미하는 리터럴 (산술 연산이 불가하다는 것을 의미)

2. string type
	- ' ', " ", ` ` 의 세가지를 이용해서 표현하는 것 (Single quaotation이 Javascript에서는 기본형으로 사용된다.)
	- ` ` (backtick) : 1. 멀티 라인 문자열 표현, 2. Expression Interpolation (표현식 삽입)

3. boolean type
	- true, false

4. undefined
	- undefined
	
5. null
	- null

6. symbol type (ES6)
	- symbol 값 (unique하다, 같은 값이 나올 수 없다)
	- 눈으로 확인할 수 없다 (출력이 안된다.)
	- Symbol() 을 이용해서 만들 수 있다.
	- Symbol() 내에 들어가는 인자는 만들어지는 Symbol의 descript 같은 것이다 (설명) - Symbol에는 아무런 영향을 주지 않는다.
    - 따라서 같은 인자를 전달한다고 하더라도 같은 Symbol 값이 되는 것은 아니다
    - Symbol 은 값을 알 수 없으므로 casting 할 수 없다.
    - 하지만 symbol이 있는지에 대한 확인은 가능하다 => if([symbol 변수명]) {}

	- Symbol.for() : Key값(인자로 준 값)을 이용해서 Symbol을 찾거나, 못찾으면 Symbol을 생성, 등록, 리턴 (global symbol registry)
	- Symbol.keyFor() : Symbol 값(인자로 준 값)으로 key를 찾는다
	** Symbol() 은 global symbol registry 사용하지 않는다.

7. Object type
	- 너무 내용이 방대하기 때문에 나중에 다시 이야기를 해보겠다.

1 ~ 6 : Primitive type (원시 타입)
Object type : Reference type

-----------------------------------------------------------------------------------------------------------

변수에도 Data type이 있나요? -> Javascript는 변수에 값이 할당되는 시점에 Type이 결정
							-> Type inference (타입 추론) = Dynamic typing (동적 타이핑)
	** 이러한 형태의 언어를 dynamic/weak type language 라 부른다.

	<=> 변수에 type을 명시하는 언어 = 명시적 type 언어
	** 이러한 형태의 언어를 static/strong type language 라 부른다.

-----------------------------------------------------------------------------------------------------------

operator
1. + 연산자
	- 숫자 + 문자열 => 숫자가 문자열로 변환된다.
	- 숫자 + boolean => boolean이 숫자로 변환된다.
		true : 1, false : 0
	- 숫자 + null -> null:0 
	- 숫자 + undefined => NaN

2. == (loose equality), === (strict equality)
	=== 는 타입까지 확인한다.

3. typeof
	- data type을 알려주는데, 앞서 배운 7개의 표준 Data Type과 완벽히 일치하지 않는다.
	** null에 typeof를 사용하게 되면 예상되는 결과는 null 이지만, Object로 나오게 된다.
	** 함수의 경우 function 으로 나오게 됨

형변환 (Type casting)
1. string으로의 형변환
	1-1. string 생성자 함수 -> new 없이 호출하면 문자열을 만들어낼 수 있다.
	1-2. Object.prototype.toStrong() 호출
	1-3. + 연산자를 이용

